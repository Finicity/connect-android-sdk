apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.6' //Use latest version
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }
    def fileFilter = ['**/R.class',
                      '**/R$*.class', '**/*$InjectAdapter.*',
                      '**/*$ModuleAdapter.*',
                      '**/Dao*.*',
                      '**/*$ViewInjector*.*',
                      '**/*$ViewBinder*.*',
                      '**/*MembersInjector*.*',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*$Lambda$*.',
                      '**/*Factory*.',
                      '**/*$Builder*',
                      '**/*$Parcelable*.*',
                      '**/*DaggerApplicationComponent*.*',
                      '**/api',
                      '**/android/**/*.*',
                      '**/me/**/*.*', '**/org/**/*.*', '**/org/**/*.*']

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java/"
    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.projectDir, includes:
            ['**/**/*.exec', '**/**/*.ec'])
}

apply from: "$project.rootDir/sonar.gradle"

def libraryGroupId = 'com.finicity.connect'
def libraryArtifactId = 'connect-sdk'
def libraryVersion = '1.0.5'

android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 105
        versionName "1.0.5"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:customtabs:28.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.7.22'
    testImplementation 'org.robolectric:robolectric:4.3'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-web:3.0.2'
}

project.afterEvaluate {
    artifactoryPublish.dependsOn('assembleRelease')
    publishing {
        publications {
            library(MavenPublication) {
                groupId libraryGroupId
                artifactId libraryArtifactId
                version libraryVersion
                artifact bundleReleaseAar

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each {
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.library)
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

artifactory {
    contextUrl = properties.getProperty('artifactoryUrl')   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = properties.getProperty('artifactoryRepoKey')
            username = properties.getProperty('artifactoryUser')
            password = properties.getProperty('artifactoryPassword')
            maven = true
        }
        defaults {
            publishArtifacts = true
            publishPom = true
        }
    }
}
